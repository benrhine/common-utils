/** --------------------------------------------------------------------------------------------------------------------
 * Application Config: Set application variables, mainClass, add info to actuator, bootRun config.
 * ------------------------------------------------------------------------------------------------------------------ */
String mainPkgName, mainPkgVersion

if (allowEnvOverride) {
    // Allow for these variables to be overridden by env variables if desired but have a fallback to a reasonable default
    group                                   = System.env.GROUP_ID               ?: "$serviceGroupId" as Object
    sourceCompatibility                     = System.env.SOURCE_COMPATIBILITY   ?: "$serviceSourceCompatibility" as Object
    description                             = System.env.APP_NAME               ?: "$serviceApplicationName"
    //mainClassName                           = System.env.MAIN_CLASS_NAME        ?: "$serviceMainClassName"
    mainPkgName                             = System.env.MAIN_PKG_NAME          ?: "$serviceMainPackageName"
    mainPkgVersion                          = System.env.MAIN_PKG_VERSION       ?: "$serviceMainPackageVersion"
} else {
    group                                   = "$serviceGroupId" as Object
    sourceCompatibility                     = "$serviceSourceCompatibility" as Object
    description                             = "$serviceApplicationName"
    //mainClassName                           = "$serviceMainClassName"
    mainPkgName                             = "$serviceMainPackageName"
    mainPkgVersion                          = "$serviceMainPackageVersion"
}

// Ensure crucial build variables are set so we catch issues early
assert group                                != null
assert version                              != null
assert sourceCompatibility                  != null
assert description                          != null
//assert mainClassName                        != null
assert mainPkgName                          != null
assert mainPkgVersion                       != null

// Ensure a unique build is set to keep beanstalk from getting confused (ONLY RELEVANT FOR ACTUAL DEPLOYMENTS)
//if (bbBuildNum) {
//    version = version + "." + bbBuildNum
//} else {
//    version = version + "-SNAPSHOT"
//}
println "\n********** APPLICATION DETAILS **********\n"

if (env == null) {
    println "Current environment: local-build"
} else {
    println "Current environment: $env"
}

println "Current application version: $version"
println "Current Main Class: $group.$mainPkgName.$serviceMainPackageVersion.$serviceMainClassName"

// Set application version properties
//ext['elasticsearch.version'] = '7.13.4'
//ext['junit.version'] = '5.8.2'

// Set the main application class - this is required for running from cmd, if you run from intellij this is not necessary
//application {
//    mainClass = "$group.$mainPkgName.$serviceMainPackageVersion.$serviceMainClassName"
//}

// Alert during the build if the Slack variables fail to retrieve.

println "\n************* SLACK DETAILS *************\n"

if (slackNotificationChannel == null) {
    println "Slack Channel name not set - Slack alerts will fail!!!\n"
}

//if (spnBuildSlackURL == null) {
//    println "Slack WebHook not set - Slack alerts will fail!!!\n"
//}

// Warn slack alerting will fail if token is not present
if (!slackToken) {
    println "Can not upload reports to slack without token"
} else {
    println "*****************************************"
    println "******** Slack token is present *********"
    println "*****************************************"
}
// End Slack alert

versionConfig {
    remoteBuild = true
    ciBuildNumberEnvVarName = "BUILD_RUN_NUMBER" //BITBUCKET_BUILD_NUMBER
    artifactType = "SNAPSHOT"
    customVersionPropertiesPath = "$projectDir/version.properties"
}


// Add build info to actuator
//springBoot {
//    buildInfo()
//}

// This needs to be disabled for docker build
//bootJar {
//    manifest {
//        def stdout = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'rev-parse', '--short', 'HEAD'
//            standardOutput = stdout
//        }
//
//        attributes 'Build-ID': stdout.toString().trim()
//    }
//}